#Reference: https://www.smarthomebeginner.com/docker-home-media-server-2018-basic
#Reference: https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/
#Requirement: Set environmental variables: USERDIR, PUID, PGID, MYSQL_ROOT_PASSWORD, and TZ as explained in the reference.

version: "3.8"
services:





# Cloudflare Tunnel
  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: unless-stopped
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}





# Glances
  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    ports:
      - "61208:61208"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/run/user/1000/podman/podman.sock:/run/user/1000/podman/podman.sock:ro"
      - "./data/glances.conf:/glances/conf/glances.conf"
      - ./:/main
      - ${SERVER1}/:/server1
      - ${SERVER2}/:/server2
      - ${SERVER3}/:/server3
      - ${SERVER4}/:/server4
    environment:
      - "GLANCES_OPT=-C /glances/conf/glances.conf -w"
    pid: 'host'
    restart: always




# Watchtower
  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup




# Portainer
  portainer:
    image: portainer/portainer-ce
    hostname: portainer
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}




# SABnzbd
  sabnzbd:
    image: "linuxserver/sabnzbd"
    hostname: sabnzbd
    container_name: "sabnzbd"
    volumes:
      - ${USERDIR}/docker/sabnzbd:/config
      - ${USERDIR}/docker/shared:/shared
      - ${USERDIR}/Downloads/complete:/downloads
      - ${USERDIR}/Downloads/incomplete:/incomplete-downloads
      - ${SERVER1}/:/server1
      - ${SERVER2}/:/server2
      - ${SERVER3}/:/server3
      - ${SERVER4}/:/server4
    ports:
        - "8090:8080"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Transmission
  transmission:
    image: "linuxserver/transmission"
    hostname: transmission
    container_name: "transmission"
    volumes:
      - ${USERDIR}/docker/transmission:/config
      - ${USERDIR}/Downloads:/downloads
    ports:
        - "9091:9091"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${TRANSMISSION_USERNAME}
      - PASS=${TRANSMISSION_PASSWORD}




# Radarr
  radarr:
    image: "linuxserver/radarr:develop"
    hostname: radarr
    container_name: "radarr"
    volumes:
      - ${USERDIR}/docker/radarr:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER1}/movies:/movies
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
      - ${DATA}/:/data
    ports:
      - "7878:7878"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr




# Radarr 4K
  radarr4k:
    image: "linuxserver/radarr:develop"
    hostname: radarr4k
    container_name: "radarr4k"
    volumes:
      - ${USERDIR}/docker/radarr4k:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER1}/movies:/movies
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "7879:7878"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_ADDON=radarr-4k-logo




# Sonarr
  sonarr:
    image: "linuxserver/sonarr:latest"
    hostname: sonarr
    container_name: "sonarr"
    volumes:
      - ${USERDIR}/docker/sonarr:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER2}/tvshows:/tv
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8989:8989"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr




# Sonarr 4K
  sonarr4k:
    image: "linuxserver/sonarr:latest"
    hostname: sonarr4k
    container_name: "sonarr4k"
    volumes:
      - ${USERDIR}/docker/sonarr4k:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER2}/tvshows:/tv
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8990:8989"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_ADDON=sonarr-4k-logo




# Prowlarr
  prowlarr:
    image: "linuxserver/prowlarr:nightly"
    hostname: prowlarr
    container_name: "prowlarr"
    volumes:
      - ${USERDIR}/docker/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    ports:
        - "9696:9696"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr




# Plex
  plexms:
    container_name: plexms
    restart: always
    image: "plexinc/pms-docker:plexpass"
    volumes:
      - ${USERDIR}/docker/plexms:/config
      - ${RAMDRIVE}/:/transcode
      - /mnt/:/media
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    environment:
      - TZ=${TZ}
      - HOSTNAME="Docker Plex"
      - PLEX_CLAIM="claim-2pwqm8YiyaxEKWjinrFN"
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - ADVERTISE_IP="http://192.168.1.10:32400/"
    devices:
      - /dev/dri/:/dev/dri/




# Jellyfin
  jellyfin:
    container_name: jellyfin
    restart: always
    image: "linuxserver/jellyfin"
    volumes:
      - ${USERDIR}/docker/jellyfin:/config
      - ${RAMDRIVE}/:/transcode
      - /mnt/:/media
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8096:8096/tcp"
      - "8920:8920/tcp"
      - "7359:7359/udp"
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.paulamato.com.au
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    devices:
      - /dev/dri/:/dev/dri/




# Tautulli
  tautulli:
    container_name: tautulli
    restart: always
    image: linuxserver/tautulli
    volumes:
      - ${USERDIR}/docker/tautulli/config:/config
      - '${USERDIR}/docker/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro'
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8181:8181"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Overseerr
  overseerr:
    container_name: overseerr
    restart: always
    image: sctx/overseerr:latest
    volumes:
      - ${USERDIR}/docker/overseerr:/app/config
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "5055:5055"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Bazarr
  bazarr:
    container_name: bazarr
    restart: always
    image: linuxserver/bazarr:latest
    volumes:
      - ${USERDIR}/docker/bazarr:/config
      - ${SERVER1}/movies:/movies
      - ${SERVER2}/tvshows:/tv
    ports:
      - "6767:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Bazarr4k
  bazarr4k:
    container_name: bazarr4k
    restart: always
    image: linuxserver/bazarr:latest
    volumes:
      - ${USERDIR}/docker/bazarr4k:/config
      - ${SERVER4}/4K/movies:/movies
      - ${SERVER4}/4K/tvshows:/tv
    ports:
      - "6768:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Whisparr
  whisparr:
    container_name: whisparr
    restart: unless-stopped
    image: ghcr.io/hotio/whisparr
    volumes:
      - ${USERDIR}/docker/whisparr:/config
      - ${USERDIR}/docker/shared:/shared
      - ${SERVER2}/whisparr:/whisparr
      - ${SERVER2}/nrop:/nrop
      - ${USERDIR}/Downloads/complete:/downloads
    ports:
      - "6969:6969"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - TZ=${TZ}





# Scrypted
  scrypted:
    container_name: scrypted
    restart: unless-stopped
    image: "koush/scrypted:latest"
    volumes:
      - ${USERDIR}/docker/scrypted:/server/volume
    ports:
      - 10080:10080/tcp
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      
      
      
      

# Tdarr
  tdarr:
    container_name: tdarr
    image: haveagitgat/tdarr:latest
    restart: unless-stopped
    network_mode: bridge
    volumes:
      - ${USERDIR}/docker/tdarr/server:/app/server
      - ${USERDIR}/docker/tdarr/configs:/app/configs
      - ${USERDIR}/docker/tdarr/logs:/app/logs
      - ${SERVER2}/tvshows:/tv
      - ${SERVER1}/movies:/movies
      - ${SERVER2}/whisparr:/whisparr
      - ${USERDIR}/transcode_cache:/temp
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - inContainer=true
      - ffmpegVersion=6
      - nodeName=MyInternalNode
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
    devices:
      - /dev/dri:/dev/dri






# Homebridge
  homebridge:
    container_name: homebridge
    restart: unless-stopped
    image: homebridge/homebridge:latest
    volumes:
      - ${USERDIR}/docker/homebridge:/homebridge
    # ports:
    #   - 51827:51827/tcp
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8787
    network_mode: host





# Pi-hole
  pihole:
    container_name: pihole
    domainname: docker
    hostname: pihole
    image: pihole/pihole:latest
    ports:
      - '53:53/tcp'
      - '53:53/udp'
      # - '67:67/udp'
      - '8182:80'
      - '8183:443'
    restart: unless-stopped
    volumes:
      - ${USERDIR}/docker/pihole/pihole:/etc/pihole
      - ${USERDIR}/docker/pihole/pihole.log:/var/log/pihole.log
      - ${USERDIR}/docker/pihole/dnsmasq.d:/etc/dnsmasq.d
    cap_add:
      - NET_ADMIN
    environment:
      - ServerIP=${SERVER_IP}
      - PROXY_LOCATION=pihole
      - VIRTUAL_HOST=pihole.${DOMAINNAME}
      - VIRTUAL_PORT=80
      - TZ=${TZ}
      - WEBPASSWORD=${PIHOLEWEBPASSWORD}
      - DNS1=127.0.0.1
      - DNS2=8.8.8.8




# Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - ${USERDIR}/docker/uptime-kuma:/app/data
    ports:
      - 3001:3001
    restart: always





# Vaultwarden
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    restart: unless-stopped
    volumes:
      - ${USERDIR}/docker/vaultwarden:/data
    ports:
      - 8964:80
    environment:
      - DOMAIN=https://vaultwarden.paulamato.com.au
      - LOGIN_RATELIMIT_MAX_BURST=10
      - LOGIN_RATELIMIT_SECONDS=60
      - ADMIN_RATELIMIT_MAX_BURST=10
      - ADMIN_RATELIMIT_SECONDS=60
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - SENDS_ALLOWED=true
      - EMERGENCY_ACCESS_ALLOWED=true
      - WEB_VAULT_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - SIGNUPS_VERIFY=true
      - SIGNUPS_VERIFY_RESEND_TIME=3600
      - SIGNUPS_VERIFY_RESEND_LIMIT=5
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}





# Homarr
  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/homarr/configs:/app/data/configs
      - ${USERDIR}/docker/homarr/icons:/app/public/icons
      - ${USERDIR}/docker/homarr/data:/data
    ports:
      - '7575:7575'





# Dash
  dash:
    image: mauricenino/dashdot:latest
    restart: unless-stopped
    privileged: true
    ports:
      - '3002:3002'
    volumes:
      - /:/mnt/host:ro
    environment:
      DASHDOT_ENABLE_CPU_TEMPS: 'true'
      DASHDOT_PORT: 3002
      DASHDOT_OVERRIDE_STORAGE_TYPES: 'nvme0n1=Main NVMe,sda=Server 1,sdb=Server 2,sdc=Server 4,sdd=Server 3'





# Kometa 
  kometa:
    image: kometateam/kometa
    container_name: kometa
    environment:
      - KOMETA_RUN=true
      - KOMETA_CONFIG=/config/special-config.yml
      - KOMETA_OVERLAYS_ONLY=true
      - KOMETA_RUN_LIBRARIES="4K Movies|4K TV Shows"
    volumes:
      - ${USERDIR}/docker/kometa/:/config





networks:
  default:
    driver: bridge
