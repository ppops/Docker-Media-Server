  #Reference: https://www.smarthomebeginner.com/docker-home-media-server-2018-basic
#Reference: https://www.smarthomebeginner.com/traefik-reverse-proxy-tutorial-for-docker/
#Requirement: Set environmental variables: USERDIR, PUID, PGID, MYSQL_ROOT_PASSWORD, and TZ as explained in the reference.

version: "3.8"
services:





# Cloudflare Tunnel
  tunnel:
    container_name: cloudflared-tunnel
    image: cloudflare/cloudflared
    restart: always
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}




# Watchtower
  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup




# Portainer
  portainer:
    image: portainer/portainer-ce
    hostname: portainer
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - ${USERDIR}/docker/shared:/shared
    environment:
      - TZ=${TZ}





# Glances
  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    ports:
      - "61208:61208"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/run/user/1000/podman/podman.sock:/run/user/1000/podman/podman.sock:ro"
      - "./data/glances.conf:/glances/conf/glances.conf"
      - ./:/main
      - ${SERVER1}/:/server1
      - ${SERVER2}/:/server2
      - ${SERVER3}/:/server3
      - ${SERVER4}/:/server4
    environment:
      - "GLANCES_OPT=-C /glances/conf/glances.conf -w --password"
    pid: 'host'
    restart: always
    secrets:
      - source: glances_password
        target: /root/.config/glances/glances.pwd




# SABnzbd
  sabnzbd:
    image: "linuxserver/sabnzbd"
    hostname: sabnzbd
    container_name: "sabnzbd"
    volumes:
      - ${USERDIR}/docker/sabnzbd:/config
      - ${USERDIR}/docker/shared:/shared
      - ${USERDIR}/Downloads/complete:/downloads
      - ${USERDIR}/Downloads/incomplete:/incomplete-downloads
      - ${SERVER1}/:/server1
      - ${SERVER2}/:/server2
      - ${SERVER3}/:/server3
      - ${SERVER4}/:/server4
    ports:
        - "8090:8080"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Transmission
  transmission:
    image: "linuxserver/transmission"
    hostname: transmission
    container_name: "transmission"
    volumes:
      - ${USERDIR}/docker/transmission:/config
      - ${USERDIR}/Downloads:/downloads
    ports:
        - "9091:9091"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${TRANSMISSION_USERNAME}
      - PASS=${TRANSMISSION_PASSWORD}




# Radarr
  radarr:
    image: "linuxserver/radarr:develop"
    hostname: radarr
    container_name: "radarr"
    volumes:
      - ${USERDIR}/docker/radarr:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER1}/movies:/movies
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
      - ${DATA}/:/data
    ports:
      - "7878:7878"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr




# Radarr 4K
  radarr4k:
    image: "linuxserver/radarr:develop"
    hostname: radarr4k
    container_name: "radarr4k"
    volumes:
      - ${USERDIR}/docker/radarr4k:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER1}/movies:/movies
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "7879:7878"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_ADDON=radarr-4k-logo




# Sonarr
  sonarr:
    image: "linuxserver/sonarr:latest"
    hostname: sonarr
    container_name: "sonarr"
    volumes:
      - ${USERDIR}/docker/sonarr:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER2}/tvshows:/tv
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8989:8989"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr




# Sonarr 4K
  sonarr4k:
    image: "linuxserver/sonarr:latest"
    hostname: sonarr4k
    container_name: "sonarr4k"
    volumes:
      - ${USERDIR}/docker/sonarr4k:/config
      - ${USERDIR}/Downloads/complete:/downloads
      - ${SERVER2}/tvshows:/tv
      - ${SERVER4}/4K:/4K
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/shared:/shared
    ports:
        - "8990:8989"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_ADDON=sonarr-4k-logo




# Prowlarr
  prowlarr:
    image: "linuxserver/prowlarr:nightly"
    hostname: prowlarr
    container_name: "prowlarr"
    volumes:
      - ${USERDIR}/docker/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    ports:
        - "9696:9696"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr





# Plex
  plexms:
    container_name: plexms
    restart: always
    image: "plexinc/pms-docker:plexpass"
    volumes:
      - ${USERDIR}/docker/plexms:/config
      - ${RAMDRIVE}/:/transcode
      - /mnt/:/media
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "32400:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
    environment:
      - TZ=${TZ}
      - HOSTNAME="Docker Plex"
      - PLEX_CLAIM="claim-2pwqm8YiyaxEKWjinrFN"
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - ADVERTISE_IP="http://192.168.1.10:32400/"
    devices:
      - /dev/dri/:/dev/dri/




# Jellyfin
  jellyfin:
    container_name: jellyfin
    restart: always
    image: "linuxserver/jellyfin"
    volumes:
      - ${USERDIR}/docker/jellyfin:/config
      - ${RAMDRIVE}/:/transcode
      - /mnt/:/media
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8096:8096/tcp"
      - "8920:8920/tcp"
      - "7359:7359/udp"
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN_NAME}
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128 
      - /dev/dri/card1:/dev/dri/card1




# Tautulli
  tautulli:
    container_name: tautulli
    restart: always
    image: linuxserver/tautulli
    volumes:
      - ${USERDIR}/docker/tautulli/config:/config
      - '${USERDIR}/docker/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro'
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "8181:8181"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Overseerr
  overseerr:
    container_name: overseerr
    restart: always
    image: sctx/overseerr:latest
    volumes:
      - ${USERDIR}/docker/overseerr:/app/config
      - ${USERDIR}/docker/shared:/shared
    ports:
      - "5055:5055"
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}




# Whisparr
  whisparr:
    container_name: whisparr
    restart: always
    image: ghcr.io/hotio/whisparr
    volumes:
      - ${USERDIR}/docker/whisparr:/config
      - ${USERDIR}/docker/shared:/shared
      - ${SERVER2}/whisparr:/whisparr
      - ${SERVER2}/nrop:/nrop
      - ${USERDIR}/Downloads/complete:/downloads
    ports:
      - "6969:6969"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - TZ=${TZ}
      
      
      
      

# Tdarr
  tdarr:
    container_name: tdarr
    image: haveagitgat/tdarr:latest
    restart: always
    network_mode: bridge
    volumes:
      - ${USERDIR}/docker/tdarr/server:/app/server
      - ${USERDIR}/docker/tdarr/configs:/app/configs
      - ${USERDIR}/docker/tdarr/logs:/app/logs
      - ${SERVER2}/tvshows:/tv
      - ${SERVER1}/movies:/movies
      - ${SERVER2}/whisparr:/whisparr
      - ${USERDIR}/transcode_cache:/temp
    ports:
      - 8265:8265 # webUI port
      - 8266:8266 # server port
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - serverPort=8266
      - webUIPort=8265
      - internalNode=true
      - apiKey=${TDARR_API_KEY}
      - inContainer=true
      - ffmpegVersion=6
      - nodeName=MyInternalNode
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - auth=true
    devices:
      - /dev/dri:/dev/dri





# Vaultwarden
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    restart: always
    volumes:
      - ${USERDIR}/docker/vaultwarden:/data
    ports:
      - 8964:80
    user: ${PUID}:${PGID}
    environment:
      - DOMAIN=https://vaultwarden.${DOMAINNAME}
      - LOGIN_RATELIMIT_MAX_BURST=10
      - LOGIN_RATELIMIT_SECONDS=60
      - ADMIN_RATELIMIT_MAX_BURST=10
      - ADMIN_RATELIMIT_SECONDS=60
      # - ADMIN_TOKEN=${ADMIN_TOKEN}
      - SENDS_ALLOWED=true
      - EMERGENCY_ACCESS_ALLOWED=true
      - WEB_VAULT_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - SIGNUPS_VERIFY=true
      - SIGNUPS_VERIFY_RESEND_TIME=3600
      - SIGNUPS_VERIFY_RESEND_LIMIT=5
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - UMASK=022





# Vaultwarden Backup
  vaultwarden-backup:
    image: bruceforce/vaultwarden-backup
    container_name: vaultwarden-backup
    restart: always
    init: true
    depends_on:
      - vaultwarden
    volumes:
      - ${USERDIR}/docker/vaultwarden:/data
      - ${USERDIR}/gdrive/vaultwarden:/backup/
    environment:
      - BACKUP_ADD_DATABASE=true
      - BACKUP_ADD_ATTACHMENTS=true
      - BACKUP_ADD_CONFIG_JSON=true
      - BACKUP_ADD_ICON_CACHE=true
      - BACKUP_ADD_RSA_KEY=true
      - BACKUP_ADD_SENDS=true
      - TIMESTAMP=true
      - CRON_TIME=0 */4 * * *
      - TZ=${TZ}
      - UID=${PUID}
      - GID=${PGID}
      - BACKUP_DIR=/backup
      - BACKUP_DIR_PERMISSIONS=777
      - DELETE_AFTER=7
      - LOG_DIR=/backup/logs
      - LOG_LEVEL=INFO
      - LOG_CLEAR_AT_START=true
      - BACKUP_ON_STARTUP=true





# Kometa 
  kometa:
    image: kometateam/kometa
    restart: always
    container_name: kometa
    environment:
      - KOMETA_RUN=true
      - KOMETA_CONFIG=/config/config.yml
      - KOMETA_OVERLAYS_ONLY=true
      - KOMETA_TIMES=01:00,07:00,10:00,12:00,16:00,18:30,21:00
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/kometa/:/config





# Ownfoil
  ownfoil:
    container_name: ownfoil
    image: a1ex4/ownfoil
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - USERNAME=${OWNFOIL_USERNAME}
      - PASSWORD=${OWNFOIL_PASSWORD}
      - ROOT_DIR=/games
      - SAVE_ENABLED=false
    volumes:
      - ${SERVER1}/switchgames:/games
      - ${USERDIR}/docker/ownfoil:/app/config
    ports:
      - "8465:8465"





# Threadfin
  threadfin:
    image: fyb3roptik/threadfin
    container_name: threadfin
    ports:
      - 34400:34400
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/threadfin/conf:/home/threadfin/conf
      - ${USERDIR}/docker/threadfin/temp:/tmp/threadfin:rw
    restart: always





# Home Assistant
  homeassistant:
    container_name: homeassistant
    image: "ghcr.io/home-assistant/home-assistant:stable"
    volumes:
      - ${USERDIR}/docker/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host





# Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ${USERDIR}/docker/ollama:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=-1
    restart: unless-stopped





# WebUI
  webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: webui
    ports:
      - "8080:8080"
    volumes:
      - ${USERDIR}/docker/open-webui:/app/backend/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - ollama
    restart: unless-stopped





# n8n
  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=n8n.${DOMAIN_NAME}
      - WEBHOOK_URL=https://n8n.${DOMAIN_NAME}/
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_SECURE_COOKIE=true
      - TZ=${TZ}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8nPostgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
    volumes:
      - ${USERDIR}/docker/n8n:/home/node/.n8n
    depends_on:
      - n8nPostgres

  n8nPostgres: # Example for PostgreSQL
    image: postgres:15
    container_name: n8n-postgres
    restart: always
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${N8N_POSTGRES_PASSWORD}
    volumes:
      - ${USERDIR}/docker/n8nPostgres:/var/lib/postgresql/data





# YTPTube
  ytptube:
    user: "0:0"
    image: ghcr.io/arabcoders/ytptube:latest
    container_name: ytptube
    restart: unless-stopped
    ports:
      - "8081:8081"
    volumes:
      - ${USERDIR}/docker/ytptube:/config:rw
      - ${SERVER1}/youtube-videos:/downloads:rw
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    tmpfs:
      - /tmp





# Actual Server
  actual-server:
    image: actualbudget/actual-server:latest
    container_name: actual-server
    ports:
      - "5006:5006"
    volumes:
      - ${USERDIR}/docker/actual-budget:/data
    restart: unless-stopped
      





networks:
  default:
    driver: bridge

secrets:
  glances_password:
    file: /home/navydons/docker/data/glances_password
